import os
import cv2
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.utils import to_categorical
from sklearn.model_selection import train_test_split

# Define image dimensions and other parameters
image_size = (150, 150)
batch_size = 64
epochs = 20

# Define a mapping of class labels to numerical labels
class_mapping = {
    'Reversal': 0,
    'Normal': 1,
    'Corrected': 2
}

# Load and preprocess the data
def load_and_preprocess_data(data_dir, image_size):
    X = []
    y = []

    for category in os.listdir(data_dir):
        class_label = os.path.basename(category)
        class_num = class_mapping.get(class_label)

        category_path = os.path.join(data_dir, category)

        for img in os.listdir(category_path):
            img_array = cv2.imread(os.path.join(category_path, img), cv2.IMREAD_COLOR)
            img_array = cv2.resize(img_array, (image_size[0], image_size[1]))
            X.append(img_array)
            y.append(class_num)

    return np.array(X), np.array(y)

data_dir = 'Gambo/Train'  # Replace with your data directory

X, y = load_and_preprocess_data(data_dir, image_size)

# Normalize pixel values to be between 0 and 1
X = X / 255.0

# Convert class vectors to binary class matrices
num_classes = len(class_mapping)
y = to_categorical(y, num_classes)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(image_size[0], image_size[1], 3))),
model.add(MaxPooling2D((2, 2))),
model.add(Conv2D(64, (3, 3), activation='relu')),
model.add(MaxPooling2D((2, 2))),
model.add(Conv2D(128, (3, 3), activation='relu')),
model.add(MaxPooling2D((2, 2))),
model.add(Flatten()),
model.add(Dense(128, activation='relu')),
model.add(Dense(num_classes, activation='softmax')),

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']),

# Train the model
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_acc}')

# Save the model for future use
model.save('dysgraphia_cnn_model.h5')
